//demoBlaze
//webutils
package util;

import java.io.File;
import java.io.IOException;
import java.time.Duration;

import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.io.FileHandler;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;

public class WebUtils {
	//creating driver as global variable to access throghout the project
	public static WebDriver driver ;

	//Method for openBrowser
	public static void openBrowser() {
		driver = new ChromeDriver();
		driver.manage().window().maximize();
	}
	//Method for clickEvent
	public static void clickEvent(WebElement element) {
		element.click();
	}	
	//Method for closeBrowser
		public static void closeBrowser() {
			driver.close();
		}		
	//Method for sendKeys
		public static void keyInput(WebElement element, String value) {
			element.sendKeys(value);
		}
	//Method for getText
		public static String keyOutput(WebElement element) {
			String value = element.getText();
			return value;
		}
	//Method for getCurrentUrl
		public static String urlOutput() {
			String value = driver.getCurrentUrl();
			return value;
		}
		//mehod for getTitle
		public static String getTitleMethod() {
			String titleValue =driver.getTitle();
			return titleValue;
		}
	//Method for thread sleep
		public static void threadSleepmethod() {
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		//Method for implicit wait
		public static void implicitWaitMethod(int sec) {
			driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(sec));
		}
		//Method for Page Load Time 
		public static void pageLoadMethod(int sec) {
			driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(sec));
		}
		//Method for Explicit wait
		public static void explicitWaitMethod(int sec, WebElement element) {
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(sec));
			wait.until(ExpectedConditions.visibilityOf(element));
		}
		//Method for Fluent wait
		public static void fluentWaitMethod(int sec,int polingsec, WebElement element){
			FluentWait<WebDriver> fwait = new FluentWait<WebDriver>(driver);
			fwait.withTimeout( Duration.ofSeconds(sec));
			fwait.pollingEvery( Duration.ofSeconds(polingsec));
			fwait.until(ExpectedConditions.visibilityOf(element));
			
			
		}
		//Method for Take Screenshot method
		public static String getScreenshotMethod(String screenshotName) {
			//String dateValue = new SimpleDateFormat("yyyyMMddhhmmss").format(new Date(0, 0, 0));
			TakesScreenshot ts = (TakesScreenshot)driver;
			File Source = ts.getScreenshotAs(OutputType.FILE);
			String destination = System.getProperty("user.dir") + "/screenshots/" + screenshotName  +".png";
			File finalDestination = new File(destination);
			try {
				try {
					FileHandler.copy(Source, finalDestination);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return destination;
			
		}
		//Method for report Generation
		public static void reportGenerateMethod() {
			ExtentHtmlReporter html = new ExtentHtmlReporter(System.getProperty("user.dir") + "/ExtentHtmlReport.html");	
			ExtentReports report = new ExtentReports();
			report.attachReporter(html);
			}
}

//signup
package page.component;


import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

import util.WebUtils;

public class SignUpPage extends WebUtils{
	@FindBy ( xpath = "//*[@id=\"signin2\"]" )
	WebElement signUpElement;
	@FindBy ( xpath = "//input[@id = 'sign-username']" )
	WebElement userName;
	@FindBy ( xpath = "//input[@id = 'sign-password']" )
	WebElement password;
	@FindBy ( xpath = "//*[@id=\"signInModal\"]/div/div/div[3]/button[@class='btn btn-primary']" )
	WebElement signUpButton;
	@FindBy ( xpath = "//*[@id=\"signInModal\"]/div/div/div[3]/button[@class='btn btn-secondary']" )
	WebElement closeButton;
	public SignUpPage() {
		PageFactory.initElements(driver, this);
	}
	public void signUp(String user, String pass) {
		
		clickEvent(signUpElement);
		threadSleepmethod();
		keyInput(userName, user);
		threadSleepmethod();
		keyInput(password, pass);
		threadSleepmethod();
		clickEvent(signUpButton);
		threadSleepmethod();
		driver.switchTo().alert().accept();
		threadSleepmethod();
		clickEvent(closeButton);
		
	}
	
}


//login
package page.component;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

import util.WebUtils;

public class LoginSample extends WebUtils {
	@FindBy ( xpath = "//*[@id= 'login2']" )
	WebElement loginElement;
	@FindBy ( xpath = "//input[@id = 'loginusername']" )
	WebElement loginName;
	@FindBy ( xpath = "//input[@id = 'loginpassword']" )
	WebElement loginPassword;
	@FindBy ( xpath = "//*[@id=\"logInModal\"]/div/div/div[3]/button[@class='btn btn-primary']" )
	WebElement loginbutton;
	@FindBy ( xpath = "//*[@id=\"logInModal\"]/div/div/div[3]/button[@class='btn btn-secondary']" )
	WebElement logincloseButton;
	public LoginSample() {
		PageFactory.initElements(driver, this);
	}
	public void loginProduct() {
		clickEvent(loginElement);
		threadSleepmethod();
		keyInput(loginName, "testuserakshu");
		threadSleepmethod();
		keyInput(loginPassword, "testpassakshu");
		threadSleepmethod();
		clickEvent(loginbutton);
		threadSleepmethod();
		//driver.switchTo().alert().accept();
		//threadSleepmethod();
		clickEvent(logincloseButton);
	}
}


//TestWebPage
package test.component;

import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;

import page.component.LoginSample;
import page.component.SignUpPage;


public class TestWebPage extends Base{
	@Test
	@Parameters({"username","password"})
	public void TestOne(String username, String password) {
//		openBrowser();
//		implicitWaitMethod(2000);
//		driver.get("https://demoblaze.com/");
		SignUpPage signObj = new SignUpPage();
//		signObj.signUp("testuserakshu", "testpassakshu");
		signObj.signUp(username, password);
//		LoginSample obj = new LoginSample();
//		obj.loginProduct();
//		closeBrowser();
		System.out.println("signed up");
		ExtentTest test = report.createTest("TestOne");
		test.log(Status.PASS, "success");
		test.log(Status.INFO, "signUp method");
		
		String s = getScreenshotMethod("test");
		test.addScreenCaptureFromBase64String(s);
		report.flush();
	}
	@Test
	public void TestTwo() {
		LoginSample obj = new LoginSample();
		obj.loginProduct();
		System.out.println("Logged in");
		ExtentTest test = report.createTest("TestOne");
		test.log(Status.PASS, "success");
		test.log(Status.INFO, "signUp method");
		report.flush();
	}
	
}

//testing.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
  <test thread-count="5" name="Test">
    <classes>
      <class name="test.component.TestWebPage">
       <parameter name="username" value="testuserakshu"></parameter>
      <parameter name="password" value="testpassakshu"></parameter>
      </class>
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->
